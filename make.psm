% Make genome:
:- [util].
:- [genecode].
:- [dnaseq].

values(base,[a,g,c,t]).
values(mutate_base(a), [a,g,c,t], [0.94,0.02,0.02,0.02]).
values(mutate_base(g), [g,c,t,a], [0.94,0.02,0.02,0.02]).
values(mutate_base(c), [c,t,a,g], [0.94,0.02,0.02,0.02]).
values(mutate_base(t), [t,a,g,c], [0.94,0.02,0.02,0.02]).

%%
% Probabilistic parameters for amino acid mutations 
% 

values(protein_mutation,[yes,no],[0.1,0.9]).
values(synonymous_triplet_mutation,[synonymous,nonsynonymous]).
values(mutate_triplet(synonymous,T1),Values) :-
	findall(T2,syn(T1,T2),Values).
values(mutate_triplet(nonsynonymous,T1),Values) :-
	findall(T2,nonsyn(T1,T2),Values).

:- set_sw(synonymous_triplet_mutation,[0.8,0.2]).

%:- forall(triplet(set_sw(mutate_triplet(synonymous,_),uniform). 

make_genome(Genome,Size,MustContainProtein,Reverse) :-
	translate(11,ProtDNA,MustContainProtein),
	mutate_protein_dna(ProtDNA,ProtMutantDNA),
	translate(11,ProtMutantDNA,MutantProtein),
	write('Mutant protein is: '), writeln(MutantProtein),
	length(ProtMutantDNA,ProtMutDNALength),
	Length is Size - ProtMutDNALength, 
	length(DNASeq,Length),
	random_dna(Length,DNASeq),
	random_split_seq(DNASeq,DNA1,DNA2),
	append(DNA1,ProtMutantDNA,Part1),
	append(Part1,DNA2,Genome),
	writeln(Genome).

make_reads(Genome,ReadSize,MinDepth,MaxDepth,ReadsOut) :-
	length(Genome,L),
	rep(L,0,DepthsIn),
	writeln(depths_in(DepthsIn)),
	make_reads_rec(Genome,ReadSize,MinDepth,DepthsIn,DepthsOut,[],ReadsOut1),
	(forall(member(D,DepthsOut), (D =< MaxDepth)) -> 
		writeln(depths(DepthsOut)),
		ReadsOut = ReadsOut1,
		forall(member(R,ReadsOut),writeln(R))
		;
		make_reads(Genome,ReadSize,MinDepth,MaxDepth,ReadsOut)).
	


make_reads_rec(Genome,ReadSize,MinDepth,DepthsInOut,DepthsInOut,ReadsInOut,ReadsInOut) :-
	forall(member(DI,DepthsInOut), DI >= MinDepth).
make_reads_rec(Genome,ReadSize,MinDepth,DepthsIn,DepthsOut,ReadsIn,ReadsOut) :-
	writeln(random_read(Genome,DepthsIn,ReadSize,Read,ReadPos)),
	random_read(Genome,DepthsIn,ReadSize,Read,ReadPos),
	writeln(here2),
	length(Genome,GenomeLength),
	ReadStart is ReadPos,
	ReadEnd is ReadPos + ReadSize,
	writeln(read_vector),
	writeln(read_vector(1,GenomeLength,ReadStart,ReadEnd,ReadVector)),
	read_vector(0,GenomeLength,ReadStart,ReadEnd,ReadVector),
	add_vectors(DepthsIn,ReadVector,NewDepthsIn),
	writeln(NewDepthsIn),
	!,
	make_reads_rec(Genome,ReadSize,MinDepth,NewDepthsIn,DepthsOut,[ReadVector|ReadsIn],ReadsOut).

read_vector(G,G,_,_,[]).
read_vector(N,G,ReadStart,ReadEnd,[0|Xs]) :-
	N < ReadStart,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).
read_vector(N,G,ReadStart,ReadEnd,[0|Xs]) :-
	N > ReadEnd,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).
read_vector(N,G,ReadStart,ReadEnd,[1|Xs]) :-
	N >= ReadStart,
	N =< ReadEnd,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).

add_vectors([],[],[]).
add_vectors([X|Xs],[Y|Ys],[Z|Zs]) :-
	Z is X + Y,
	add_vectors(Xs,Ys,Zs).

rep(0,_,[]).
rep(N,X,[X|Xs]) :-
	N1 is N - 1,
	rep(N1,X,Xs).

%% Normalize a set of depths to yield inverse proportional probabilities
%inverse_depths_probs(Depths,Probs) :-
%	length(Depths,L),
%	rep(L,0.01,PseudoCounts),
%	add_vectors(Depths,PseudoCounts,Perturbed),
%	sumlist(Perturbed,Total),
%%	findall(W,(member(D,Perturbed), W is 1 - (D / Total)),Weights),
%	%writeln(Weights),
%	sumlist(Weights,TotalWeights),
%	findall(P,(member(W,Weights), P is W / TotalWeights),Probs).
%	%writeln(Probs).
inverse_depths_probs(Depths,Probs) :-
	sumlist(Depths,0),!,
	length(Depths,L),
	P is 1 / L,
	rep(L,P,Probs).

inverse_depths_probs(Depths,Probs) :-
	sumlist(Depths,Total),
	findall(P,(member(D,Depths), P is D / Total),Probs).

	

% FIXME: Make read probability proportional with Depth
random_read(Genome,Depths,ReadSize,Read,ReadPos) :-
	random_split_seq_min_weighted(Genome,DNA1,DNA2,ReadSize,Depths),
	length(DNA1,ReadPos),
	length(ReadClean,ReadSize),
	append(ReadClean,_,DNA2),
	mutate_read(ReadClean,Read).

random_split_seq_min_weighted(Seq, Part1, Part2,ReadSize,Depths) :-
	length(Seq,L),
	LMax is L - ReadSize,
	findall(X,between(0,LMax,X),AllLen),
	findall(D2,(
		between(0,LMax,X), 
		length(C1,X),
		length(C2,ReadSize),
		append(C1,C2,C3),
		append(C3,_,Depths),
		D2 is 1/(min(C2)+0.001)),
	DepthWeights),
	writeln(DepthWeights),
	inverse_depths_probs(DepthWeights,Probs),
	writeln(probs(Probs)),
	random_select(AllLen,Probs,L1),
	L #= L1+L2,
	length(Part2,L2),
	append(Part1,Part2,Seq).

random_dna(0,[]).
random_dna(N,[X|Xs]) :-
	msw(base,X),
	N1 is N - 1,
	random_dna(N1,Xs).	

mutate_read([],[]).
mutate_read([X|Xs],[Y|Ys]) :-
	msw(mutate_base(X),Y),
	mutate_read(Xs,Ys).

mutate_triplet(T1,T2) :-
	msw(synonymous_triplet_mutation,Syn),
	msw(mutate_triplet(Syn,T1),T2).

mutate_protein_dna([],[]).
mutate_protein_dna([X1,X2,X3|Xs],[Y1,Y2,Y3|Ys]) :-
	mutate_triplet([X1,X2,X3],[Y1,Y2,Y3]),
	mutate_protein_dna(Xs,Ys).

t1 :-
	mutate_triplet([t,t,c],X), writeln(X).

t2 :-
	translate(11,X,[g,e,n,e,t,i,c,s]), mutate_protein_dna(X,Y), translate(11,Y,P), writeln(P).

t3 :-
	make_genome(Genome,80,[c,p,h],_Reverse),
	writeln(Genome).

t4 :-
	make_genome(Genome,15,[c,p,h],_Reverse),
	writeln(Genome),
	random_read(Genome,10,Read,ReadPos),
	writeln(Read),
	writeln(readpos(ReadPos)),
	length(Genome,G),
	ReadStart is ReadPos,
	ReadEnd is ReadPos + 10,
	read_vector(0,G,ReadStart,ReadEnd,ReadVector),
	writeln(ReadVector).

t5 :- 
	make_genome(Genome,20,[c,a,c,a],_Reverse),
	writeln(Genome),
	make_reads(Genome,10,2,10,R),
	length(R,NumReads),
	writeln(number_of_reads(NumReads)).

