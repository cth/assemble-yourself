:- [util].
:- [genecode].
:- [dnaseq].
:- [settings].

values(strand,[forward,reverse],[0.1,0.9]).
values(base,[a,g,c,t]).
values(mutate_base(a), [a,g,c,t], [0.97,0.01,0.01,0.01]).
values(mutate_base(g), [g,c,t,a], [0.97,0.01,0.01,0.01]).
values(mutate_base(c), [c,t,a,g], [0.97,0.01,0.01,0.01]).
values(mutate_base(t), [t,a,g,c], [0.97,0.01,0.01,0.01]).
values(protein_mutation,[yes,no],[0.1,0.9]).
values(synonymous_triplet_mutation,[synonymous,nonsynonymous],[0.8,0.2]).
values(mutate_triplet(synonymous,T1),Values) :-
	findall(T2,syn(T1,T2),Values).
values(mutate_triplet(nonsynonymous,T1),Values) :-
	findall(T2,nonsyn(T1,T2),Values).
values(start_codon,Codons) :-
	findall(Codon,genecode_start_codon(11,Codon),Codons).
values(stop_codon,Codons) :-
	findall(Codon,genecode_stop_codon(11,Codon),Codons).

make_genome(Genome,Size,BuriedProteinDNA,GenomeProtKey) :-
	msw(start_codon,StartCodon),
	msw(stop_codon,StopCodon),
	append(StartCodon,BuriedProteinDNA,StartORF),
	append(StartORF,StopCodon,ORF),
	length(ORF,ORFLength),
	Length is Size - ORFLength, 
	length(DNASeq,Length),
	random_dna(Length,DNASeq),
	random_split_seq(DNASeq,DNA1,DNA2),
	append(DNA1,ORF,Part1),
	append(Part1,DNA2,Genome),
	length(DNA1,L1),
	length(DNA2,L2),
	rep(L1,'-',K1),
	rep(L2,'-',K2),
	append(K1,ORF,Tmp1),
	append(Tmp1,K2,GenomeProtKey).

make_reads(Genome,ReadSize,MinDepth,DepthsOut,ReadsOut,Alignment) :-
	length(Genome,L),
	rep(L,0,DepthsIn),
	make_reads_rec(Genome,ReadSize,MinDepth,DepthsIn,DepthsOut,[],ReadsOut,[],Alignment).

make_reads_rec(_Genome,_ReadSize,MinDepth,DepthsInOut,DepthsInOut,ReadsInOut,ReadsInOut,Consensus,Consensus) :-
	forall(member(DI,DepthsInOut), DI >= MinDepth).
make_reads_rec(Genome,ReadSize,MinDepth,DepthsIn,DepthsOut,ReadsIn,ReadsOut,AlignIn,AlignOut) :-
	random_read(Genome,DepthsIn,ReadSize,Read,ReadPos),
	length(Genome,GenomeLength),
	ReadStart is ReadPos,
	ReadEnd is ReadPos + ReadSize,
	read_vector(0,GenomeLength,ReadStart,ReadEnd,ReadVector),
	add_vectors(DepthsIn,ReadVector,NewDepthsIn),
	read_align(0,GenomeLength,ReadStart,ReadEnd,ReadAlign,Read),
	!,
	make_reads_rec(Genome,ReadSize,MinDepth,NewDepthsIn,DepthsOut,[Read|ReadsIn],ReadsOut,[ReadAlign|AlignIn],AlignOut).

make_consensus_sequence([Consensus],Consensus).
make_consensus_sequence([R1,R2|ReadsRest],Consensus) :-
	make_consensus_sequence(R1,R2,R3),
	make_consensus_sequence([R3|ReadsRest],Consensus).

make_consensus_sequence([],[],[]).
make_consensus_sequence(['.'|Xs],[Y|Ys],[Y|Zs]) :-
	make_consensus_sequence(Xs,Ys,Zs).
make_consensus_sequence([X|Xs],['.'|Ys],[X|Zs]) :-
	make_consensus_sequence(Xs,Ys,Zs).
make_consensus_sequence([X|Xs],[Y|Ys],[Z|Zs]) :-
	iupac_consensus(X,Y,Z),
	make_consensus_sequence(Xs,Ys,Zs).

% IUPAC consensus between two IUPAC consensus codes 
iupac_consensus(IUPAC1,IUPAC2,Consensus) :-
	iupac(Bases1,IUPAC1),
	iupac(Bases2,IUPAC2),
	append(Bases1,Bases2,Bases),
	eliminate_duplicate(Bases,SetBases),
	sort(SetBases,SetBasesSort),
	iupac(SetBasesSort,Consensus).

% IUPAC relations:
iupac([a],a).
iupac([c],c).
iupac([g],g).
iupac([t],t).
iupac([a,g],r).
iupac([c,t],y).
iupac([c,g],s).
iupac([a,t],w).
iupac([g,t],k).
iupac([a,c],m).
iupac([c,g,t],b).
iupac([a,g,t],d).
iupac([a,c,t],h).
iupac([a,c,g],v).
iupac([a,c,g,t],n).

make_consensus_sequence([],[],[]).
make_consensus_sequence(['*'|Xs],[Y|Ys],[Y|Zs]) :-
	make_consensus_sequence(Xs,Ys,Zs).
make_consensus_sequence([X|Xs],['*'|Ys],[X|Zs]) :-
	make_consensus_sequence(Xs,Ys,Zs).
make_consensus_sequence([X|Xs],[Y|Ys],[Z|Zs]) :-
	iupac_consensus(X,Y,Z),
	make_consensus_sequence(Xs,Ys,Zs).

read_align(G,G,_,_,[],[]).
read_align(N,G,ReadStart,ReadEnd,['.'|Xs],Read) :-
	N < ReadStart,
	N1 is N + 1,
	read_align(N1,G,ReadStart,ReadEnd,Xs,Read).
read_align(N,G,ReadStart,ReadEnd,['.'|Xs],Read) :-
	N >= ReadEnd,
	N1 is N + 1,
	read_align(N1,G,ReadStart,ReadEnd,Xs,Read).
read_align(N,G,ReadStart,ReadEnd,[X|Xs],[X|Ys]) :-
	N >= ReadStart,
	N < ReadEnd,
	N1 is N + 1,
	read_align(N1,G,ReadStart,ReadEnd,Xs,Ys).

read_vector(G,G,_,_,[]).
read_vector(N,G,ReadStart,ReadEnd,[0|Xs]) :-
	N < ReadStart,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).
read_vector(N,G,ReadStart,ReadEnd,[0|Xs]) :-
	N >= ReadEnd,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).
read_vector(N,G,ReadStart,ReadEnd,[1|Xs]) :-
	N >= ReadStart,
	N < ReadEnd,
	N1 is N + 1,
	read_vector(N1,G,ReadStart,ReadEnd,Xs).

add_vectors([],[],[]).
add_vectors([X|Xs],[Y|Ys],[Z|Zs]) :-
	Z is X + Y,
	add_vectors(Xs,Ys,Zs).

rep(0,_,[]).
rep(N,X,[X|Xs]) :-
	N1 is N - 1,
	rep(N1,X,Xs).

%% Normalize a set of depths to yield inverse proportional probabilities
inverse_depths_probs(Depths,Probs) :-
	sumlist(Depths,0),!,
	length(Depths,L),
	P is 1 / L,
	rep(L,P,Probs).

inverse_depths_probs(Depths,Probs) :-
	sumlist(Depths,Total),
	findall(P,(member(D,Depths), P is D / Total),Probs).

% FIXME: Make read probability proportional with Depth
random_read(Genome,Depths,ReadSize,Read,ReadPos) :-
	random_split_seq_min_weighted(Genome,DNA1,DNA2,ReadSize,Depths),
	length(DNA1,ReadPos),
	length(ReadClean,ReadSize),
	append(ReadClean,_,DNA2),
	mutate_read(ReadClean,Read).

random_split_seq_min_weighted(Seq, Part1, Part2,ReadSize,Depths) :-
	length(Seq,L),
	LMax is L - ReadSize,
	findall(X,between(0,LMax,X),AllLen),
	findall(D2,(
		between(0,LMax,X), 
		length(C1,X),
		length(C2,ReadSize),
		append(C1,C2,C3),
		append(C3,_,Depths),
		D2 is 1/(min(C2)+0.001)),
	DepthWeights),
	inverse_depths_probs(DepthWeights,Probs),
	random_select(AllLen,Probs,L1),
	L #= L1+L2,
	length(Part2,L2),
	append(Part1,Part2,Seq).

random_dna(0,[]).
random_dna(N,[X|Xs]) :-
	msw(base,X),
	N1 is N - 1,
	random_dna(N1,Xs).

mutate_read([],[]).
mutate_read([X|Xs],[Y|Ys]) :-
	msw(mutate_base(X),Y),
	mutate_read(Xs,Ys).

mutate_triplet(T1,T2) :-
	msw(synonymous_triplet_mutation,Syn),
	msw(mutate_triplet(Syn,T1),T2).

mutate_protein_dna([],[]).
mutate_protein_dna([X1,X2,X3|Xs],[Y1,Y2,Y3|Ys]) :-
	mutate_triplet([X1,X2,X3],[Y1,Y2,Y3]),
	mutate_protein_dna(Xs,Ys).

write_fasta(_,[]).
write_fasta(N,[R|Rs]) :-
	write('>'),
	writeln(N),
	forall(member(X,R),write(X)),nl,
	N1 is N + 1,
	write_fasta(N1,Rs).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Latex generation                                                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

latex_make_solution(GenomeLen,ORF,Consensus,Alignment) :-
	writeln('\\section*{Solution:}'),
	write('\\begin{tabular}{'),
	foreach(_ in 1..GenomeLen, write('|p{0.3cm}')),
	writeln('|}'),

	writeln('\\hline'),
	append(O1,[O2],ORF),
	forall(member(O,O1),(upcase(O,O_UP), write(O_UP), write('& '))),
	upcase(O2,O2_UP),write('\\textbf{'),write(O2_UP),write('}'),writeln('\\\\'),
	writeln('\\hline'),

	writeln('\\hline'),
	forall(member(A,Alignment),(
		append(A1,[A2],A),
		forall(member(B,A1),(upcase(B,C), write(C), write('& '))),
		upcase(A2,A2_UP), write(A2_UP), writeln('\\\\'),
		writeln('\\hline')
	)),

	write('\\multicolumn{'),
	write(GenomeLen), 
	writeln('}{ |c| }{ IUPAC Consensus sequence: }  \\\\'),
	writeln('\\hline'),

	writeln('\\hline'),
	append(Consensus1,[Consensus2],Consensus),
	forall(member(C,Consensus1),(upcase(C,C_UP), write(C_UP), write('& '))),
	upcase(Consensus2,Consensus2_UP),write('\\textbf{'),write(Consensus2_UP),write('}'),writeln('\\\\'),
	writeln('\\hline'),

	writeln('\\end{tabular}').

latex_write_nucleotide(forward,N) :- upcase(N,U), write(U).
latex_write_nucleotide(reverse,N) :- dna_complement(N,R), upcase(R,U), write(U).

latex_make_nucleotide_entry(GenomeLen,Strand,Prefix,InBetween,Suffix) :-
	append(Suffix1,[Last],Suffix),
	write('\\multicolumn{'),
	write(GenomeLen), 
	write('}{ |c| }{ Nucleotide sequence ('),
	write(Strand),
	writeln(' strand): }  \\\\'),
	writeln('\\hline'),
	forall(member(X,Prefix), (write('\\textbf{'), latex_write_nucleotide(Strand,X),write('}'), write('& '))),
	forall(member(X,InBetween), (write(' '), write('& '))),
	forall(member(X,Suffix1), (write('\\textbf{'), latex_write_nucleotide(Strand,X),write('}'), write('& '))),
	write('\\textbf{'), latex_write_nucleotide(Strand,Last), write('}'),
	writeln('\\\\'),
	writeln('\\hline').

latex_make_amino_acid_entry(GenomeLen,Strand,Prefix,InBetween,Suffix) :-
	write('\\multicolumn{'),
	write(GenomeLen), 
	write('}{ |c| }{ Amino acid sequence in each three reading frames ('),
	write(Strand),
	writeln(' strand) }  \\\\'),
	writeln('\\hline'),

	% FIXME: Doesn't work with arbitrary lengths
	AminoAcidCols1 is floor(GenomeLen/3)-1,
	AminoAcidCols2 is floor(GenomeLen/3)-2,
	foreach(_I in 1..AminoAcidCols1, write('\\multicolumn{3}{ |c| }{ } & ')),
	writeln('\\multicolumn{3}{ |c| }{ } & \\\\ '),
	writeln('\\hline'),
	write(' &'),
	foreach(_I in 1..AminoAcidCols1, write('\\multicolumn{3}{ |c| }{ } & ')),
	writeln('\\multicolumn{3}{ |c| }{ } \\\\ '),
	writeln('\\hline'),
	write('\\multicolumn{2}{ |c| }{ } &'),
	foreach(_I in 1..AminoAcidCols2, write('\\multicolumn{3}{ |c| }{ } & ')),
	writeln('\\multicolumn{3}{ |c| }{ } & '),
	write('\\multicolumn{2}{ |c| }{ } \\\\'),
	writeln('\\hline').

latex_make_scaffold(GenomeLen,Genome) :-
	writeln('\\section*{Scaffold}'),
	write('\\begin{tabular}{'),
	foreach(_ in 1..GenomeLen, write('|p{0.3cm}')),
	writeln('|}'),
	writeln('\\hline'),
	length(Prefix,6),
	length(Suffix,6),
	append(Prefix,SuffixPart,Genome),
	append(InBetween,Suffix,SuffixPart),
	append(Suffix1,[_],Suffix),
	dna_seq_complement(Prefix,PrefixRev),
	dna_seq_complement(Suffix,SuffixRev),


	latex_make_amino_acid_entry(GenomeLen,forward,Prefix,InBetween,Suffix),
	latex_make_nucleotide_entry(GenomeLen,forward,Prefix,InBetween,Suffix),
	writeln('\\hline'),

	foreach(_ in 1..26,(
		forall(member(_A,Prefix), write(' & ')),
		forall(member(_B,InBetween), write(' & ')),
		forall(member(_C,Suffix1), ( write(' & '))),
		writeln('\\\\'))),
	writeln('\\hline'),


	writeln('\\hline'),
	latex_make_nucleotide_entry(GenomeLen,forward,PrefixRev,InBetween,SuffixRev),
	latex_make_amino_acid_entry(GenomeLen,forward,PrefixRev,InBetween,SuffixRev),

	write('\\end{tabular}').

latex_make_single_read(Reads,Strands,ReadLen,I) :-
	nth1(I,Reads,R),
	nth1(I,Strands,Strand),
	write('\\begin{tabular}{'),
	foreach(_ in 1..ReadLen, write('|p{0.3cm}')),
	writeln('|}'),
	writeln('\\hline'),
	append(FirstBases,[LastBase],R),
	forall(member(B,FirstBases),(latex_write_nucleotide(Strand,B),write(' & '))),
	latex_write_nucleotide(Strand,LastBase), write('\\\\'),
	write(' % '), write(Strand), writeln(' strand read'),
	writeln('\\hline'),
	writeln('\\end{tabular}'),
	writeln('\\newline'),writeln('\\medskip'),writeln('\\noindent').


latex_make_reads(Reads,Strands,ReadLen) :-
	writeln('\\section*{Reads - cut out}'),
	writeln('\\noindent'),
	length(Reads,N),
	foreach(I in 1..N,latex_make_single_read(Reads,Strands,ReadLen,I)).

make_latex(Reads,ReadStrands,ReadLen,Genome,Alignment,ORF,MutantProtein,Consensus) :-
	length(Genome,GenomeLen),

	% INTRODUCTION:
	writeln('\\documentclass{article}'),
	writeln('\\usepackage[a4paper,margin=0.1cm]{geometry}'),
	%writeln('\\usepackage[a4paper,landscape,margin=0.1cm]{geometry}'),
	writeln('\\usepackage{rotating}'),
	write('\\newcommand{\\mutantprotein}{'),
	forall(member(AA,MutantProtein),(upcase(AA,AA_UP),write(AA_UP))),
	writeln('}'),
	length(Reads,NumberOfReads),
	write('\\newcommand{\\numberofreads}{'),
	write(NumberOfReads),
	writeln('}'),
	writeln('\\begin{document}'),
	writeln('\\large'),
	writeln('\\input{intro.tex}'),
	!,

	% SCAFFOLD:
	writeln('\\newpage'),
	writeln('\\begin{sidewaysfigure}'),
	latex_make_scaffold(GenomeLen,Genome),
	writeln('\\end{sidewaysfigure}'),
	!,

	% READS:
	writeln('\\newpage'),
	latex_make_reads(Reads,ReadStrands,ReadLen),
	!,

	% TRANSLATION TABLES:
	writeln('\\newpage'),
	writeln('\\begin{sidewaysfigure}'),
	writeln('\\section*{Amino Acid translation table}'),
	writeln('\\input{aminoacids.tex}'),
	writeln('\\end{sidewaysfigure}'),

	writeln('\\newpage'),
	writeln('\\begin{sidewaysfigure}'),
	latex_make_solution(GenomeLen,ORF,Consensus,Alignment),
	writeln('\\end{sidewaysfigure}'),
	!,

	writeln('\\end{document}').

testr :-
	latex_make_reads([[a,a,a],[g,g,g]],[reverse,forward],3).

upcase('.',' ') :- !. % quacky hack
upcase('-',' ') :- !. % quacky hack
upcase(Low,Up) :-
	atom_codes(Low,LowCode),
	LowCode >= 97,
	LowCode =< 122,	
	UpCode is LowCode - 32,
	atom_codes(Up,[UpCode]).

go(BuriedProtein) :-
	assert(secret_protein(BuriedProtein)),
	go.

go :- 
	GenomeSize = 40,
	readsize(ReadSize),	
	mindepth(MinDepth),
	secret_protein(BuriedProtein),

	%% Make a mutated protein
	translate(11,ProtDNA,BuriedProtein),
	mutate_protein_dna(ProtDNA,ProtMutantDNA),
	translate(11,ProtMutantDNA,MutantProtein),
	MutantProtein \= BuriedProtein,

	%% Make genome containing protein
	make_genome(Genome,GenomeSize,ProtDNA,ProtPos),

	%% Make random reads for genome 
	make_reads(Genome,ReadSize,MinDepth,Depths,Reads,Alignment),

	%% Indicate that some reads map to the reverse strand
	findall(Strand,(member(_,Reads),msw(strand,Strand)),ReadStrands),

	sort(Alignment,AlignmentSortedRev),
	reverse(AlignmentSortedRev,AlignmentSorted),

	% Make IUPAC consensus sequence
	make_consensus_sequence(Alignment,Consensus),

	%% Write latex
	write_fasta(1,Reads),
	secret_protein(Secret),
	append(Secret,['.tex'],TexFileList),
	writeln(TexFileList),

	atom_concat_list(TexFileList,TexFile),
	writeln(TexFile),

	tell(TexFile),
	make_latex(Reads,ReadStrands,ReadSize,Genome,AlignmentSorted,ProtPos,MutantProtein, Consensus),
	told,
	atom_concat('pdflatex ',TexFile,TexCmd), 
	system(TexCmd),

	%% Summarize:
	writeln('-------------------------- Summary ------------------------------'),
	write('(Known) Mutant protein is: '), writeln(MutantProtein),
	writeln('genome:'),writeln(Genome),
	writeln('depths:'),writeln(Depths),
	writeln('Alignment:'),
	forall(member(A,AlignmentSorted), writeln(A)),
	length(Reads,NumReads),
	writeln(Consensus),
	writeln(ProtPos),
	writeln(number_of_reads(NumReads)).
